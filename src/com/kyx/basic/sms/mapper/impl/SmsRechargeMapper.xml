<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.kyx.basic.sms.mapper.SmsRechargeMapper">
  <resultMap id="BaseResultMap" type="com.kyx.basic.sms.model.SmsRecharge">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="shop_id" jdbcType="INTEGER" property="shopId" />
    <result column="amount" jdbcType="INTEGER" property="amount" />
    <result column="opt_user" jdbcType="VARCHAR" property="optUser" />
    <result column="pic_url" jdbcType="VARCHAR" property="picUrl" />
    <result column="before_count" jdbcType="INTEGER" property="beforeCount" />
    <result column="after_count" jdbcType="INTEGER" property="afterCount" />
    <result column="shop_name" jdbcType="VARCHAR" property="shopName" />
  </resultMap>
  <sql id="Base_Column_List">
    id, create_time, shop_id, amount, opt_user, pic_url,before_count,after_count
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from sms_recharge
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from sms_recharge
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insertSelective" parameterType="com.kyx.basic.sms.model.SmsRecharge">
    insert into sms_recharge
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="shopId != null">
        shop_id,
      </if>
      <if test="amount != null">
        amount,
      </if>
      <if test="optUser != null">
        opt_user,
      </if>
      <if test="picUrl != null">
        pic_url,
      </if>
      <if test="beforeCount != null">
        before_count,
      </if>
      <if test="afterCount != null">
        after_count,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="shopId != null">
        #{shopId,jdbcType=INTEGER},
      </if>
      <if test="amount != null">
        #{amount,jdbcType=INTEGER},
      </if>
      <if test="optUser != null">
        #{optUser,jdbcType=VARCHAR},
      </if>
      <if test="picUrl != null">
        #{picUrl,jdbcType=VARCHAR},
      </if>
      <if test="beforeCount != null">
        #{beforeCount,jdbcType=INTEGER},
      </if>
      <if test="afterCount != null">
        #{afterCount,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.kyx.basic.sms.model.SmsRecharge">
    update sms_recharge
    <set>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="shopId != null">
        shop_id = #{shopId,jdbcType=INTEGER},
      </if>
      <if test="amount != null">
        amount = #{amount,jdbcType=INTEGER},
      </if>
      <if test="optUser != null">
        opt_user = #{optUser,jdbcType=VARCHAR},
      </if>
      <if test="picUrl != null">
        pic_url = #{picUrl,jdbcType=VARCHAR},
      </if>
      <if test="beforeCount != null">
        before_count=#{beforeCount,jdbcType=INTEGER},
      </if>
      <if test="afterCount != null">
        after_count=#{afterCount,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  
  <select id="getList" parameterType="com.kyx.basic.sms.model.SmsRecharge" resultMap="BaseResultMap">
    select a.*,b.shop_name from sms_recharge a left join shops_info b on a.shop_id = b.id where 1=1 
    <if test="shopName != null and shopName != ''">
    	and b.shop_name like CONCAT('%', #{shopName}, '%')
    </if>
    <if test="dateRangeStartTime != null and dateRangeEndTime != null">
        and (a.create_time between #{dateRangeStartTime,jdbcType=TIMESTAMP} and #{dateRangeEndTime,jdbcType=TIMESTAMP})
    </if>
     order by a.create_time desc
  </select>
</mapper>