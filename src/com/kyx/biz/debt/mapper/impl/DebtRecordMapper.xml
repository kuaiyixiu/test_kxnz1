<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.kyx.biz.debt.mapper.DebtRecordMapper">
  <resultMap id="BaseResultMap" type="com.kyx.biz.debt.model.DebtRecord">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="kind" jdbcType="INTEGER" property="kind" />
    <result column="source_id" jdbcType="INTEGER" property="sourceId" />
    <result column="debt_amount" jdbcType="DECIMAL" property="debtAmount" />
    <result column="return_amount" jdbcType="DECIMAL" property="returnAmount" />
    <result column="left_amount" jdbcType="DECIMAL" property="leftAmount" />
    <result column="addtime" jdbcType="TIMESTAMP" property="addtime" />
    <result column="enable" jdbcType="INTEGER" property="enable" />
    <result column="supply_name" jdbcType="VARCHAR" property="supplyName" />
    <result column="user_name" jdbcType="VARCHAR" property="userName" />
  </resultMap>
  <sql id="Base_Column_List">
    id, kind, source_id, debt_amount, return_amount, left_amount, addtime,enable
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from debt_record
    where id = #{id,jdbcType=INTEGER}
  </select>
  <select id="selectBySourceIdAndKind" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from debt_record
    where source_id = #{sourceId,jdbcType=INTEGER} and kind = #{kind,jdbcType=INTEGER} and enable = 1
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from debt_record
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insertSelective" parameterType="com.kyx.biz.debt.model.DebtRecord">
    insert into debt_record
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="kind != null">
        kind,
      </if>
      <if test="sourceId != null">
        source_id,
      </if>
      <if test="debtAmount != null">
        debt_amount,
      </if>
      <if test="returnAmount != null">
        return_amount,
      </if>
      <if test="leftAmount != null">
        left_amount,
      </if>
        addtime,
       <if test="enable != null">
        enable,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="kind != null">
        #{kind,jdbcType=INTEGER},
      </if>
      <if test="sourceId != null">
        #{sourceId,jdbcType=INTEGER},
      </if>
      <if test="debtAmount != null">
        #{debtAmount,jdbcType=DECIMAL},
      </if>
      <if test="returnAmount != null">
        #{returnAmount,jdbcType=DECIMAL},
      </if>
      <if test="leftAmount != null">
        #{leftAmount,jdbcType=DECIMAL},
      </if>
		now(),
		<if test="enable != null">
        	#{enable,jdbcType=INTEGER},
      	</if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.kyx.biz.debt.model.DebtRecord">
    update debt_record
    <set>
      <if test="kind != null">
        kind = #{kind,jdbcType=INTEGER},
      </if>
      <if test="sourceId != null">
        source_id = #{sourceId,jdbcType=INTEGER},
      </if>
      <if test="sourceId != null">
        source_id = #{sourceId,jdbcType=INTEGER},
      </if>
      <if test="debtAmount != null">
        debt_amount = #{debtAmount,jdbcType=DECIMAL},
      </if>
      <if test="returnAmount != null">
        return_amount = #{returnAmount,jdbcType=DECIMAL},
      </if>
      <if test="leftAmount != null">
        left_amount = #{leftAmount,jdbcType=DECIMAL},
      </if>
      <if test="addtime != null">
        addtime = #{addtime,jdbcType=TIMESTAMP},
      </if>
      <if test="enable != null">
        enable = #{enable,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.kyx.biz.debt.model.DebtRecord">
    update debt_record
    set kind = #{kind,jdbcType=INTEGER},
      source_id = #{sourceId,jdbcType=INTEGER},
      debt_amount = #{debtAmount,jdbcType=DECIMAL},
      return_amount = #{returnAmount,jdbcType=DECIMAL},
      left_amount = #{leftAmount,jdbcType=DECIMAL},
      addtime = #{addtime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <select id="getInfo" parameterType="com.kyx.biz.debt.model.DebtRecord" resultMap="BaseResultMap">
    select  d.*,r.user_name,s.supply_name from debt_record d 
    <if test="kind == 2 or kind==3">
     left join repertory r on r.id=d.source_id left join supply s on r.supply_id=s.id 
    </if>
    where 1=1  and d.left_amount &gt; 0 
    <if test="(kind == 2 or kind==3) and shopId != null">
       and r.shop_id = #{shopId}
    </if>
    <if test="(kind == 2 or kind==3) and supplyName != null">
      and s.supply_name like CONCAT(CONCAT('%', #{supplyName}), '%')
    </if>
    <if test="enable != null">
       and d.enable = #{enable}
    </if>
    <if test="kind != null">
       and d.kind = #{kind}
    </if>
    <if test="dateRangeStartTime != null and dateRangeEndTime != null">
      and (d.addtime between #{dateRangeStartTime,jdbcType=TIMESTAMP} and #{dateRangeEndTime,jdbcType=TIMESTAMP})
    </if>
  </select>
  <select id="getSumDebtAmount" parameterType="com.kyx.biz.debt.model.DebtRecord" resultType="java.math.BigDecimal">
    select sum(d.left_amount) from debt_record d 
    <if test="kind == 2 or kind==3">
     left join repertory r on r.id=d.source_id left join supply s on r.supply_id=s.id 
    </if>
    where 1=1  and d.left_amount &gt; 0 
    <if test="(kind == 2 or kind==3) and shopId != null">
       and r.shop_id = #{shopId}
    </if>
    <if test="(kind == 2 or kind==3) and supplyName != null">
      and s.supply_name like CONCAT(CONCAT('%', #{supplyName}), '%')
    </if>
    <if test="enable != null">
       and d.enable = #{enable}
    </if>
    <if test="kind != null">
       and d.kind = #{kind}
    </if>
    <if test="dateRangeStartTime != null and dateRangeEndTime != null">
      and (d.addtime between #{dateRangeStartTime,jdbcType=TIMESTAMP} and #{dateRangeEndTime,jdbcType=TIMESTAMP})
    </if>
  </select>
</mapper>